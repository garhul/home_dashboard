import React from 'react';
import { controls, CMDButton, CMDSliider } from './controls/controls';
import {
  Charts,
  ChartContainer,
  ChartRow,
  YAxis,
  LineChart,
} from 'react-timeseries-charts';
import { TimeSeries } from 'pondjs';
import bus from '../comm/bus';

function WidgetTitle(props) {
  return <div className="title">{props.name}</div>;
}

function AuroraControls(props) {
  return <div>Aurora controls</div>;
}

function SensorControls(props) {
  const style = {
    value: {
      stroke: '#a02c2c',
      opacity: 0.2,
    },
  };
  const series = new TimeSeries({
    name: 'USD_vs_EURO',
    columns: ['time', 'value'],
    points: [
      [1416787200000, 0.8034],
      [1416182400000, 0.800128571428571],
      [1415577600000, 0.802128571428572],
      [1414972800000, 0.801071428571429],
      [1414368000000, 0.790814285714286],
      [1413763200000, 0.786685714285714],
      [1413158400000, 0.786085714285714],
      [1412553600000, 0.791914285714286],
      [1411948800000, 0.791828571428571],
      [1411344000000, 0.781842857142857],
      [1410739200000, 0.774342857142857],
      [1410134400000, 0.773142857142857],
      [1409529600000, 0.764971428571428],
      [1408924800000, 0.758242857142857],
      [1408320000000, 0.751028571428571],
      [1407715200000, 0.747114285714286],
      [1407110400000, 0.7463],
      [1406505600000, 0.745271428571429],
      [1405900800000, 0.741785714285714],
      [1405296000000, 0.737228571428571],
      [1404691200000, 0.734828571428571],
      [1404086400000, 0.732957142857143],
      [1403481600000, 0.734371428571428],
      [1402876800000, 0.736614285714286],
      [1402272000000, 0.736757142857143],
      [1401667200000, 0.7339],
      [1401062400000, 0.7338],
      [1400457600000, 0.731114285714286],
      [1399852800000, 0.728585714285714],
      [1399248000000, 0.721242857142857],
      [1398643200000, 0.721857142857143],
      [1398038400000, 0.723557142857143],
      [1397433600000, 0.722928571428571],
      [1396828800000, 0.724328571428572],
      [1396224000000, 0.7272],
      [1395619200000, 0.725528571428572],
      [1395014400000, 0.721314285714286],
      [1394409600000, 0.720057142857143],
      [1393804800000, 0.724828571428571],
      [1393200000000, 0.727714285714286],
      [1392595200000, 0.728614285714286],
      [1391990400000, 0.732457142857143],
      [1391385600000, 0.738371428571429],
      [1390780800000, 0.734371428571428],
      [1390176000000, 0.735542857142857],
      [1389571200000, 0.733871428571429],
      [1388966400000, 0.734442857142857],
      [1388361600000, 0.7288],
      [1387756800000, 0.729714285714286],
      [1387152000000, 0.728914285714286],
      [1386547200000, 0.727542857142857],
      [1385942400000, 0.734485714285714],
      [1385337600000, 0.736814285714286],
      [1384732800000, 0.740428571428571],
      [1384128000000, 0.744442857142857],
      [1383523200000, 0.742828571428571],
      [1382918400000, 0.730585714285714],
      [1382313600000, 0.7273],
      [1381708800000, 0.735742857142857],
      [1381104000000, 0.737914285714286],
      [1380499200000, 0.737728571428572],
      [1379894400000, 0.740185714285714],
      [1379289600000, 0.744942857142857],
      [1378684800000, 0.7542],
      [1378080000000, 0.758542857142857],
      [1377475200000, 0.7508],
      [1376870400000, 0.748357142857143],
      [1376265600000, 0.751385714285714],
      [1375660800000, 0.750957142857143],
      [1375056000000, 0.7538],
      [1374451200000, 0.7567],
      [1373846400000, 0.763],
      [1373241600000, 0.773128571428571],
      [1372636800000, 0.771428571428571],
      [1372032000000, 0.765257142857143],
      [1371427200000, 0.752671428571429],
      [1370822400000, 0.752242857142857],
      [1370217600000, 0.7627],
      [1369612800000, 0.772014285714286],
      [1369008000000, 0.775657142857143],
      [1368403200000, 0.774085714285714],
      [1367798400000, 0.764471428571428],
      [1367193600000, 0.762914285714286],
      [1366588800000, 0.767314285714286],
      [1365984000000, 0.764157142857143],
      [1365379200000, 0.765571428571429],
      [1364774400000, 0.776871428571429],
      [1364169600000, 0.777128571428572],
      [1363564800000, 0.771771428571429],
      [1362960000000, 0.768142857142857],
      [1362355200000, 0.767485714285714],
      [1361750400000, 0.763028571428571],
      [1361145600000, 0.752128571428571],
      [1360540800000, 0.746757142857143],
      [1359936000000, 0.740214285714286],
      [1359331200000, 0.738842857142857],
      [1358726400000, 0.748757142857143],
      [1358121600000, 0.749771428571429],
      [1357516800000, 0.760428571428571],
      [1356912000000, 0.7601],
      [1356307200000, 0.757085714285714],
      [1355702400000, 0.757671428571429],
      [1355097600000, 0.767771428571429],
      [1354492800000, 0.768414285714286],
      [1353888000000, 0.771057142857143],
      [1353283200000, 0.778957142857143],
      [1352678400000, 0.785557142857143],
      [1352073600000, 0.782542857142857],
      [1351468800000, 0.773914285714286],
      [1350864000000, 0.769971428571429],
      [1350259200000, 0.767642857142857],
      [1349654400000, 0.772328571428571],
      [1349049600000, 0.772914285714286],
      [1348444800000, 0.774571428571429],
      [1347840000000, 0.766442857142857],
      [1347235200000, 0.7744],
      [1346630400000, 0.791485714285714],
      [1346025600000, 0.797614285714286],
      [1345420800000, 0.803171428571429],
      [1344816000000, 0.811642857142857],
      [1344211200000, 0.809471428571429],
      [1343606400000, 0.813528571428571],
      [1343001600000, 0.8206],
      [1342396800000, 0.8167],
      [1341792000000, 0.815814285714286],
      [1341187200000, 0.799471428571428],
      [1340582400000, 0.7975],
      [1339977600000, 0.791971428571429],
      [1339372800000, 0.795385714285714],
      [1338768000000, 0.800542857142857],
      [1338163200000, 0.802214285714286],
      [1337558400000, 0.790128571428571],
      [1336953600000, 0.781871428571429],
      [1336348800000, 0.770071428571429],
      [1335744000000, 0.758442857142857],
      [1335139200000, 0.757071428571429],
      [1334534400000, 0.761742857142857],
      [1333929600000, 0.762842857142857],
      [1333324800000, 0.757071428571429],
      [1332720000000, 0.750914285714286],
      [1332115200000, 0.756428571428572],
      [1331510400000, 0.762771428571429],
      [1330905600000, 0.758785714285714],
      [1330300800000, 0.7483],
      [1329696000000, 0.752628571428571],
      [1329091200000, 0.7604],
      [1328486400000, 0.757771428571429],
      [1327881600000, 0.760028571428571],
      [1327276800000, 0.766],
      [1326672000000, 0.781028571428571],
      [1326067200000, 0.784971428571429],
      [1325462400000, 0.775442857142857],
      [1324857600000, 0.768757142857143],
      [1324252800000, 0.766142857142857],
      [1323648000000, 0.761457142857143],
      [1323043200000, 0.746671428571429],
      [1322438400000, 0.7479],
    ].reverse(),
  });

  return (
    <div>
      Sensor controls Tmax: Tmin: H
      <ChartContainer timeRange={series.timerange()} width={800}>
        <ChartRow height="200">
          <YAxis
            id="axis1"
            label="AUD"
            min={0.5}
            max={1.5}
            width="60"
            type="linear"
            format="$,.2f"
          />
          <Charts>
            <LineChart axis="axis1" series={series} column={['aud']} />
          </Charts>
          <YAxis
            id="axis2"
            label="Euro"
            min={0.5}
            max={1.5}
            width="80"
            type="linear"
            format="$,.2f"
          />
        </ChartRow>
      </ChartContainer>
    </div>
  );
}

export class Widget extends React.Component {
  render() {
    const controls =
      this.props.type === 'sensors' ? <SensorControls /> : <AuroraControls />;
    return (
      <div
        className="widget"
        onClick={() => {
          this.props.onSelected(this.props);
        }}
      >
        <WidgetTitle {...this.props} />
        {controls}
      </div>
    );
  }
}

export class WidgetList extends React.Component {
  render() {
    const widgets = this.props.widgets.map((item, index) => {
      return (
        <Widget
          onSelected={this.props.onSelected}
          key={index}
          {...item}
        ></Widget>
      );
    });

    return <div id="Widgets">{widgets}</div>;
  }
}

// export class DeviceControls extends React.Component {

//   send(data) {
//     console.log('sending data:' + JSON.stringify(data));
//     const topics = this.props.devices.map(device => device.topic);
//     socket.send(JSON.stringify({ topics, cmd: data.cmd, payload: data.payload }));
//   }

//   render() {
//     console.log(this.props);
//     if (this.props.devices.length === 0)
//       return <h2>Select device(s)</h2>

//     const Buttons = controls.map((ctrl, index) => {
//       if (ctrl.type === "button") return <CMDButton update={(data) => this.send(data)} key={index} {...ctrl}></CMDButton>;
//       if (ctrl.type === "slider") return <CMDSliider update={(data) => this.send(data)} key={`slider${index}`} {...ctrl}></CMDSliider >;
//       return null;
//     });

//     const sliders = "sliders be here";

//     const deviceNames = this.props.devices.map(device => device.name);
//     return <div id="DeviceControl">
//       <h2>{deviceNames.join(' | ')}</h2>
//       <div>{Buttons}</div>
//       <div></div>
//       <div>{sliders}</div>
//     </div >
//   }
// }
